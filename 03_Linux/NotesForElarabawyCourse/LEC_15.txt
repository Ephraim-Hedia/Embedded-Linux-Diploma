LEC 15 : Process Management (Part 1)

What is a process ?
	- A process is an instance of a running program 
	- Linux is a multi-tasking OS , this means it can run multiple tasks simultaneously 
	- The Linux Kernal distribute the processor time among the running processes 
	- Even a single application , may have multiple threads (for doing multiple actions in parallel)
	- in Linux , a thread is just another process (of special nature) so a multi-threaded applications is an application that
	  have multiple processes running in parallel 
	- We can also have multiple instances of the same application running simultaneously in different processes
	
Process Owner :
	- Linux is a multi-user system , so multiple users can be using the system 
	- Each user starting a process becomes its owner 
	- Note that the process owner doesnot have to be the same as the owner of the binary file for the process 
	- Each process have an owner , some processes started by the system can be owned by the root user 
	- The process owner has privileges on his process , he can kill it , pause it , resume it . 
	- The root user have super powers on all system processes 
	- The process inherits its user privileges when trying to access resources 
	  (for example when a process tries to write in a file)
	- Remember : if the process file has the permission 's' , the process inherits its permissions from its file owner
	  (not the process owner)

Parent & Child Processes :
	- Processes are organized in parent-child relationships 
	- Each process that creates another becomes the parent , and the new process becomes the child process
	- First process to run is the 'init' process that is started at system boot ... this is the grand parent of all processes 
	  in the whole system
	- if a process dies , then its orphan childern are re-parented to the init process
	
Process IDs :
	- Each process has a unique number to identify it 
	- it is called process ID (PID)
	- Each process will maintain its PID and the PID of its parent (PPID)
	- The PID and PPID enable us to build the process hierarchy tree 
	- the init process is the parent of all processes , which has 
		PID = 1 
		PPID = 0
	- To show the process tree hierarchy 
		$ pstree		(Show tree starting ar init process)
		$ pstree -p 		(to show PIDs of all processes)
		$ pstree 1000		(Show tree starting at process with PID = 1000)
		
Process Group :
	- Process Group is a family of processes (A process , its childern , grand-childern , ...etc)
	- When a process is created it becomes a member of the process group of its parent 
	- some processes may be started in its new group , and it will detach from its parent group , and become a process Group Leader
	- All descendants will follow the new group
	- Each process maintain the ID of its process group (PGID)
		- for a normal process , its PGID is the same as its parent PGID 
		- for a process Group Leader , its PGID is the same as its own PID

Process Types :
	- Processes can be classified into one of the following :
		- Interactive processes
		- Automatic Processes (Batch processes)
		- Daemon Processes 

Interactive processes :
	- The process is started by a user withen a terminal 
	- it is controlled via that terminal 
	- it is attached to its terminal , and will be killed if its terminal is closed 
	- it is called interactive , cause it communicates with the user through the terminal 
	- Examples :
		$ ls 
		$ cat *.log | grep "error" | sort
		$ echo "Good Morning" > my-file
		
The Job Concept :
	- when a command is issued , the execution of this command is called a Job 
	- The Job can be :
		- A single process 
			$ gedit
			$ cat my-file
		- Multiple connected processes 
			$ ls | sort 
		- A script that runs multiple processes (withen a sub-shell)
			$ ./my-script
	- Jobs can be manipulated in the shell via "job Control"
	- Jobs can run in the :
		- foreground :
			- All input and output of the terminal is exclusively for this job 
			- user can not use the terminal for any other activity or start other jobs 
			- Only one job can be a foreground job 
			- initially the shell is in the foreground until a job is launched 
		- Background :
			- Job input/output does not utilize the terminal 
			- However , it is still attached to the terminal 
			- Possibility of multiple Jobs in the background for the same terminal 
			- Sometimes it is useful when :
				- The process in the job has a Graphical interface and does not need the terminal for its input/ouput
				- the process takes a long time in processing , and the user needs to use the terminal for onter processes
				- User needs to launch another job on the same terminal
				
Job Control :
	- start a job in the foreground 
		- getdit 
	- Start a job in the background 
		- getdit &
	- Stop the foreground Job 
		$ gedit 
		Ctrl + z 
	- Resume the paused Job in the foreground 
		$ gedit 
		Ctrl + z
		$ fg
	- Interrupt a foreground Job 
		$ getdit
		Ctrl + c
	- Switch the foreground Job to the Background
		$ gedit 
		Ctrl + z
		$ bg
	- List Jobs within the current shell session 
		$ jobs 
		- This will show which job runs in the FG , and which run in BG 
	- Switch a background job into the foreground 
		$ jobs 
		$ fg %n		(where n is the process number in the list)
	- Kill a background Job (all processes in this Job)
		$ jobs 
		$ kill %n
		
Jobs and Process Groups :
	- For each new job , a new process Group is created for processes inside this job 
	- this means that each job has its own process group 
	- if the job is about running a script , then the sub-shell that runs the script becomes the process Group Leader
	- When you perform Job control commands (send it to background, stop it , bring it back to foreground , ... ) , 
	  it applies on whole process group for this job and not on single process
	  
Shell Session :
	- Each shell has its own session
	- ALl processes running inside this session , will carry the same SID (which is the PID or the shell owning the session)
	- The shell is named the session leader 
	- A shell session contains one or more Jobs (the ones launched under it)
	- Jobs inside a session , one of this happens :
		- All Jobs run in the background , and the shell runs in the foreground
		- A single Job runs in the foreground , while the shell and all other Jobs run in the background 
		
		
		
Training :
	$ jobs 
	$ gedit
	Ctrl + z  
	$ fg 
	Ctrl + z
	$ jobs 
	$ bg
	$ tail -f file1
	$ ^z
	$ bg %2
	$ jobs
	$ ps -o		
	$ ps -o pid,ppid,pgid,sid,command	
		
		
		
		
		
		
		
		
		
		
		
