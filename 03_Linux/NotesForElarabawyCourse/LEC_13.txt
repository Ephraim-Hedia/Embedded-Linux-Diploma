LEC 13_Regular Expressions


What is Regular Expressions ?
	- we learned how to do simple text operations (Like search on single strings ... )
	- How about if i want to :
		- Search for string-1 or string-2 ....
		- Search for a string only if it occurs at the beginning of the line 
		- search for a pattern (such as a phone number , email , URL , ... )
		- Search for a pattern that have some repetition 
		- etc ...
	- This means we need a more powerful mechanism to deal with text patterns 
	- That is the role of regular Expressions (REGEX)
	- we learned to use patterns with filenames via wild cards and other expansions but those expansions were limited to file names
	- Regular Expressions use similar techniques but used to general text patterns (so don't confuse the two , cause they have 
	  different role)
	- Regular Expressions are a very powerful tool for creating text patterns for use by several Linux tools (specially for search in 
	  text )
	- Used a lot in scripting language and tools such as 'perl' and python 
	- one of the main tools using it is grep (the 're' in 'grep' stands for regular expressions)

Regex are Complicated :
	- a lot of specail cases and forms 
	- some of the tools using it , have slight changes to the rules 
	- some tools have richer set than the one used in bash (such as perl)
	- This Lecture in only going to introduce the topic , if interested there are a lot of sources on REGEX

grep Command :
	$ grep [options] <string/pattern> <files>
	option		Long			Description	
	-i 		--ignore-case		Ignore case 	
	-v		--invert-match		show lines that does not match 
	-c		--count			print only the count of the matches
	-l		--files-with-match	Print Only the filenames	
	-L		--files-without-match
	-n		--line-number		Include line Numbers
	-h		--no-filename		Don't include the file name
	
	
Literal Vs. Meta-Characters :
	- Literal Characters : are those characters that represent themselves in the search pattern
		$ grep "error" *.log
			- The letters in "error" are all literal Characters
	- Meta characters : are those characters that have special meaning 
		^ $ . [] {} - ? * + () | \
		- All other characters are Literal characters
	- Normally , it is recommanded to put any expressions with meta-charachters inside a quote , to avoid expansion according the shell 
	  rules 
	- Meta characters can be treated as literals if they are escaped , i.e. preceded by a back slash 
		Examples :
			\^ \{ \$ \\
	- The back slash can also convert some of the literal characters into a meta-characters 
		Examples :
			\d \w
	- The regular expressions are patterns of text created from a mix of literal characters and meta-characters
	
Types of Regular Expressions :
	- POSIX defines two types of regular expressions :
		- Basic regular Expressions (BRE)
		- Extended Regular Expressions (ERE)
	- Basic regular Expressions use the following meta-characters , all other characters are considered litteral :
		. ^ $ [] *
	- Extended Regular Expressions use the following set in addition to the basic set :
		() {} ? + |
	- Then the bachslash is used to reverse those meta-characters into literals (in ERE), and vice versa (in BRE)
		- The tool 'grep' uses BRE
		- to access ERE , use 'egrep' or 'grep -E '
		

Basic Regular Expressions (BRE) :
	- [The dot character '.'] :
		- The '.' is a meta-character that represent any single character (not including NULL character)
		- for example :
			$ grep ".zip" file.log
				- This searches for a 4 letter text pattern that starts with any character followed by the three 
				  letter in 'zip'
					- may result in ; gzip , bzip , gnubzip, rezipped	
					- But will not result in : zip
	
	- [^ & $] :
		- The (^) at the beginning of the string means that this string has to be at the beginning of the line 
		- The ($) at the end of the string means that this string has to be at the end of the line
		- Example :
			$ grep "^zip" file.txt		--> results in any line that starts with 'zip'
			$ grep "zip$" file.txt		--> results in any line that ends with 'zip'
			$ grep "^zip$" file.txt		--> results in any line that have only 'zip'
			$ grep "^$" file.txt		--> results in empty lines
		
	- [ and ] 
		- The use of brackets for any of a set of characters listed between the brackets 
			$ grep "[bg]zip" dict.txt	
			Results in : bzip,gzip,aabzip
		- Any character inside the bracket will be considered literal except for 
			- (^) if it comes at the beginning (will considered as negation)
			- (-) if it comes in the middle ( will be considered as range)
		- Negation :
			$ grep "[^bg]zip" dict.txt
				- will catch words with any character before zip except b or g or NULL character
		- Ranges :
			$ grep "[a-z]2" dict.txt 
				- will catch words starting with any small letter followed by 2 
			$ grep "[a-fA-F]4 dict.txt"
			
			
	- shorthand character Class
		- We can use selected set of escaped characters to represent some character classses 
		- Examples 
			-regex			-Description
			\w			Stands for [a-zA-Z0-9_] (word character)	
			\s			Stands for space characters or tabs or line breaks
			\t 			Stands for tabs (ASCII 0x09)
			\r 			Stands for Carriage Return (ASCII 0x0D)
			\n 			Stands for Line Feed (0x0A)
			\xnn			Stands for character with ASCII = nn (\xA9 == @)
			
	- Character Classes
		- The following characte classes can be used :
			[[:alnum:]]			Alphanumeric[a-zA-Z0-9]
			[[:word:]]			same as alnum with addition of underscore (\w) [a-zA-Z0-9_]
			[[:alpha:]]			Only letters [a-zA-Z]
			[[:digit:]]			Only Digit [0-9]
			[[:blank:]]			Space Bar or Tab (\s)
			[[:lower:]]			Only lower case letters [a-z]
			[[:upper:]]			Only upper case letters [A-Z]
			[[:space:]]			space
			[[:xdigit:]]			Hex digit [a-fA-F0-9]
		
		
Extended Regular Expressions (ERE):
	- Alternation (|)
		$ grep -E "AAA|BBB" file.txt
			- This matches any line containing AAA or BBB
		- We separate the alternation from the rest of the regular expressions usnig '()'
			$ grep -E "^(AAA|BBB|CCC)" file.txt
			
			
	- Quantifiers [* , + and ?]
		- The character '?' is used to express that the preceding element to be optional (Zeo or one time)		
		- The character '*' is used (Zero or More times)
		- The character '+' is used (One or More times)
		Example :
			We are searching any line starting iwth a phone Number ... this can be in the format
			(nnn) nnn-nnnn OR nnn nnn-nnnn
				$grep -E "^\(?[0-9][0-9][0-9]\)? [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]" file.txt	
		Example :
			Want to check which lines constitute a proper statment , start with a capital letter , 
			followed by any character or spaces , and ending by a period
				$ grep -E "^[[:upper:]][[:upper:][:lower:]]*\.$" file.txt
				
Matching Count { } :
	- The Curly brackets '{}' can be used to match an element specific number of times
		Matching Count 		Description
		{n}			n times
		{n,m}			n to m times (inclusive)
		{n,}			n or more times
		{,m} 			m or less times
	- Example : the phone number Example :
		$ grep -E "\(?[:digit:]{3}\)?[:digit:]{3}-[:digit:]{4}" file.txt
	- Examples :
		- Some example to play with :
			$ egrep -i 'Continued\.*' file.txt
			$ grep "[0-9a-fxA-FX]abc" file.txt
			$ egrep 'fish\|chips\|pies' file.txt
			$ egrep -i '\(cream\|fish\|birthdat\|\)cakes' file.txt
			$ grep '[Jj]oe [Bb]loggs' file.txt
			$ grep -E "colou?r" file.txt
		
		
Using Regular Expressions in Other Commands :
	- Alot of other commands also work with regular expressions such as :
		- the command 'finds' and 'locate' for finding files 
		- The 'vi' editor 	
		- The command less can perform text search using regular expressions
		- Tools that use regular expressions extensively 
			- sed
			- awk
	
			
			
			
			
			
			
			
			
			
			
			
		
		
	
