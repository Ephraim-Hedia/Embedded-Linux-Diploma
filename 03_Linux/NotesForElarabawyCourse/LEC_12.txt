LEC 12 : Basic Text Handling
Why Text Files ?
	- Text Files play a big role in Linux such as :
		- All Linux Configuration files are text based 
		- Source code for programs and scripts
		- program log files
		- Web pages 
		- XML Files 
		
in This Lecture :
	- Display a text file
	- Merging text files 
	- Creating Text files
	- Emptying a text files
	- Editing a text file
	- Sorting text file 
	- counting in text files
	- Searching in text files 
	- Comparing text files
	- Generating and Using Patches 

- Displaying a Text File
	- [cat Command]
		$ cat <file name>
			- This command sends the the requested file to the standard output device (stdout) which is defaulted to be the 
			  screen
		$ cat -n <filename>
			- This Command is similar to the one above but also includes the line numbers in the output
		$ cat <filename> | grep "string"
			- This Command sends the file contents to the grep command which searches for the string , and sends the lines
			  containing that string to stdout
	- [more/less Commands]
		- The cat command has a problem with long files , since the output is sent in bulk to the screen
		- To fix That , we can use the commands more and less
		- Both Commands diplay the file in a page by page fashion 
			$ less <filename>
			$ more <filename>
		- The less command is better , since it allows the use of up/down Scrolling
		- Very useful as the last command in a pipe
			$ ls * | grep "log" | sort | less
			$ ls -la | less
			
	- [head / tail Commands]
		$ head <filename>
		$ tail <filename>
			- Those Commands list only the first (or the last> part of the file
				$ head file1		(displays first 10 lines of the file)
				$ tail file2 		(displays the last 10 lines of the file)
			- You can Specify the number of Lines to list 
				$ head -100 file1 	(display the first 100 lines of the file)
				$ tail -50 file2	(display the last 50 lines of the file)
				
			- to List the updates of a file in a live fashion (very useful for tracking log files as they build up while 
			  the program is running )
			- Very common log file to track 
				$ tail -f 50 /var/log/messages
- Concatenation of Files :
	- [cat Command ... Again]
		$ cat file1 file2 file3
			- This Commands concatenates the tree files and send output to stdout
		$cat file1 file2 file3 > file.total	
			- the tree files are concatenated and stored in file.total 
		$ cat * > file.txt
			- All files in the folder are merged in one file
		- Note : 
			- if you have a folder containing short videos and want to concatenate them into a single movie , you can do
			$ cat *.mpeg > movie.mpeg

- Creating an Empty Text File :
	- You can use redirection of an empty string to the file
		$ > file.txt
			-Note that if file.txt exists , this will empty tis contents (This is called truncating the file)
			
	- You can use the touch Command
		$ touch file.txt
			- Note that if file.txt exists , this command will update the file time stamp without changing its contents
				
- Creating / Appending Text Files : 
	- we can create files in txt editors , but we can quickly create ones using one of the following :
		- Using echo :
			$ echo "Good Morning " > file1
			$ echo "Good Morning " >> file2		
			- Although is looks weird , sometimes it is useful when creating a file inside a script
		- Using cat :
			$ cat > filename
				<put the first line of text>
					.....	
				<put the last line of text >
				^d
- Editing a Text File :
	- GUI based Editors :
		Most famous are :
			Emacs or xemacs 
			gedit
			Kate
			gvim (Based on vi)
	- Non GUI Based :
		Most famous is vi or vim (a must for any embedded developer)
		Note :
			- The editor vi (or vim) looks very primitive at the first use , but if you get used to it , 
			  you will find that it is an extremely powerful editor
			- Also , sometimes , vi is the only available editor on the embedded platform target . Hence , 
			  getting used to it is essential for embedded developers
			  
- Searching Text :
	[grep Command]
		$ grep <string or pattern> <file to search>
			- it very powerful tool to search text 
			- it can search for a certain text pattern in one file , folder , or a tree of folders 
			- 'grep' can use the powerful regular expressions to improve search capability (to be discussed in a future 
			   lecture)			
		- Examples :
			$ grep "error" ./*.log
			$ grep "fatal error" .
			$ cat *.log | grep "error" | less
			
	- More on grep Command :
		$ grep -i <pattern> <files> (case insensitive search)
		$ grep -r <pattern> <files> (recursive search)
		$ grep -v <pattern> <files> (reverse search , show the lines not containing the pattern)
		$ grep -n <pattern> <files> (Show Lines Numbers)

- Sorting Text 
	$ sort <file>
		- This Command is used to sort Lines in a file/files alphabetically
		- Examples :
			$ sort file1 			(sort the lines of the file and send it to stdout)
			$ sort file1 > file2 
			$ sort -r file1 		(reverse sort)
			$ sort -u file1			(don't show similar lines)
		- Other Options :
			- -b OR --ignore-leading-blanks
			- -f OR --ignore-case
			- -n OR --numeric-sort		(99 is less than 100)
			
- Removing Repeated Lines :
	- [uniq Command]
		$uniq file1
			- This Command is used to remove repeated Lines in  a file/files
			  This is a very common thing in log files
			- Examples :
				$ uniq file		(remove repeated lines and send output to stdout)
				$ uniq -d file1		(Only show duplicated lines)
			- Note :
				- The Command uniq only work on adjacend repeated lines , hence if you wnat to remove 
				  non-adjacent repeated lines , you must :
				  	$ cat file1 | sort | uniq

-Counting in Text Files :
	- [wc command]
		$wc <file>
			- This commands is used to count words/lines/chars in a file or files 
			Examples :
				$ wc file1
				$ wc -l file1 	(Only Line Count)
				$ wc -c file1	(Only Character Count) 
				$ wc -w file1	(Only word Count)
				
		
- Comparing Text Files :
	- There are several GUI Based tools for comparing text files in linux , such as :
		- Meld 
		- kdiff3
	- There are capable for both comparing two text files and merging changes in a third file
	- This is very useful specially for use in source code files to identify changes between two versions of the same file
	- we can also perform the comparison using the command line interface using the command diff
	- [diff Command]
		- The diff command is very useful in comparison of files and for generation of patches 
		  (deltas between files) to be used later
	- [patch command]
		- The patch Command is used to add the use the patch file to update the old file to the new one
		
	- Examples :
		$ diff from-file to-file
			- This Command compares two files as Follows :
				- if both from-file and to-file are filenames , then diff compares those two files
				- if one of from-file & to-file is a filename , and the other is a directory , 
				  then diff compares the file with the one having the same name in the given directory
				- if both from-file and to-file are dirctories , diff compares corresponding files in the two
				  directories , the comoparison can be recursive if '-r' is used
				- NOTE that the output will go to stdout , to send it to a patch file , you need to redirect the output
					$ diff old-file new-file > patch-file
				
				- The diff command output can be one of the following :
					- Normal Format :
						$ diff <old-file><new-file>
					- Context Format 
						$ diff -c <old-file> <new-file>
					- Unified Format 
						$ diff -u <old-file> <new-file>
			- Normal Ouput Format :
				- The Normal Output consist of sections of text to be compared between the two files
				- Each Section is a line or more from the first file , compared to a line or more from the second file
				- Then each section , there is a leading line (called the change command) to describe the main difference
				  in this section . this line contains a letter that points out the difference .
				  	- The letter 'a' stands for APPEND 
				  	- The Letter 'c' stands for CHANGE 
				  	- the letter 'd' stands for DELETE
				  - so examples to the format for the change command is :
				  	- 8a12,15
				  	- 5,7c8,10
				  	- 5,7d3
				  - 8a12,15 :
				  	- Line 8 from the first file is appended by lines 12-15 from the second file
				  - 5,7c8,10	
				  	- Lines 5-7 from the first file is replaced by lines 8-10 from the second file
				  - 5,7d3
				  	- Delete lines 5-7 from the first file (note , if they were not deleted they would have
				  	  started at line 3 in the second file)
				  	  
			- Context Format :
				- in this format , the diff output more lines of each file to show the context . 
				  some of these lines are not changed , but other have some changes
				- the output starts with defining a symbol string for each file
				- this is done by putting the symbol , followed by file name , followed by date of modification
				- Then , there will be sections of text for file changes , in each section :
					- A line for each file to show line numbers to look at
					- A listing of the lines in each file
					- In front of each line , there is a code to show the state of that line 
						- Nothing : means the line is the same in both files 
						- '!' : means the line has modification . this symbol will be in both files to show
						        before and after state
						- '+' : means the line has been added 
						- '-' : means the line has been removed
			- Unified Format :
				- This output format tries to be more compact than the Context format 
				- instead of having 2 copies of listing (one per file) , there will be one listing that shows lines
				  in both files , and those which are removed from the first file , and those which are added to it
				- The output starts bu assigning a symbol (normally '---') to the old file , and a symbol (normally '+++')
				  to the new file
				- This is followed by a group of text sections in which there are changes between the files 
					- in each section :
						- Range of line numbers for each file
						- One Listing of lines withen that range with :
							- starting with a ' ' means that the line is shared between the two files
							- starting with a '+' means that the line is exists only in the second file (added)
							- starting with a '-' means that the line is exists only in the first file 
							  (removed)
Applying patches :
	[patch command]:
		$ patch <original file> <patch file>
		- This Command applies the patch to the original (old) file , to generate the new file
			- By default , it tries to detect the format used in the patch file
			- This automatic detection can be overridden by using :
				$ patch -n <original file> <patch file>
				$ patch -c <original file> <patch file>
				$ patch -u <original file> <patch file>
			- The patch is applied on the original file , and the file is updated 
			- to remove the patch (unpatch the file)
				$ patch -R <updated file> <patch file> 
				
Applying patches , Patching a Directory Tree :
	$ patch -p <num> < <patch-file>
		- if the patch file was generated by comparing two directories
			$ diff -ru old-dir new-dir > patch-file
		- Now we can use patch to update another directory with the old contents
			$ patch -p1 < patch-file
			
			
			
			
			
			
			
	To be Continue		
Training :
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	$
	
	
			
			
